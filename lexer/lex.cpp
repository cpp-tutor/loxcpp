// Generated by Flexc++ V2.14.00 on Fri, 02 Feb 2024 12:17:18 +0000

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>
#include <filesystem>

// $insert class_ih
#include "Lex.ih"


    // s_ranges_: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const LexBase::s_ranges_[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
     5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9,10,10,10,10,11,12,13,14,15,16,17,18,19,19,
    19,19,19,19,19,19,19,19,20,20,21,22,23,24,24,25,25,25,25,25,25,25,25,25,25,
    25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,
    35,36,37,38,39,40,41,41,42,43,44,45,46,47,48,49,50,51,52,53,54,54,54,55,56,
    57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,
    58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,
    58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,
    58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,
    58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,
    58,58,58,58,58,58,
};

// $insert startcondinfo
    // s_dfa_ contains the rows of *all* DFAs ordered by start state.  The
    // enum class StartCondition_is defined in the baseclass header.
    // StartCondition_::INITIAL is always 0.  Each entry defines the row to
    // transit to if the column's character range was sensed. Row numbers are
    // relative to the used DFA, and d_dfaBase_ is set to the first row of
    // the subset to use.  The row's final two values are respectively the
    // rule that may be matched at this state, and the rule's FINAL flag. If
    // the final value equals FINAL (= 1) then, if there's no continuation,
    // the rule is matched. If the BOL flag (8) is also set (so FINAL + BOL (=
    // 9) is set) then the rule only matches when d_atBOL is also true.
int const LexBase::s_dfa_[][62] =
{
    // INITIAL
    { 1, 2, 2, 1, 2, 1, 2, 1, 3, 4, 1, 5, 6, 7, 8, 9,10,11,12,13,
          1,14,15,16, 1,17,18, 1,19, 1,17, 1,20,17,21,17,22,23,17,17,
         24,17,25,17,26,27,28,17,29,30,31,32,17,33,17,34, 1,35, 1,-1,
             -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             54, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             53, -1},  // 2
    {36,36,36,36,36,36,36,36,37,36,36,36,36,36,36,36,36,36,36,36,
         36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
         36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-1,
             54, -1},  // 3
    { 4, 4,-1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,-1,
             52, -1},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             35, -1},  // 5
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             36, -1},  // 6
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             46, -1},  // 7
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             44, -1},  // 8
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             41, -1},  // 9
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             43, -1},  // 10
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             42, -1},  // 11
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             45, -1},  // 12
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,40,-1,13,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             29, -1},  // 13
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,-1,-1,-1,
         -1,-1,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             50, -1},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             32, -1},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             48, -1},  // 16
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 17
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             39, -1},  // 18
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             40, -1},  // 19
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,44,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 20
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,45,17,17,17,17,17,17,17,
         17,17,46,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 21
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,47,17,48,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 22
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,49,17,17,17,17,17,17,17,
         17,17,17,17,50,51,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 23
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,52,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 24
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,53,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 25
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         54,17,17,17,17,55,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 26
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,56,17,17,
         17,17,17,17,17,17,17,17,57,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 27
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,58,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 28
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,59,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 29
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,60,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 30
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,61,
         17,17,17,17,17,17,17,17,62,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 31
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,63,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 32
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,64,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 33
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             37, -1},  // 34
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             38, -1},  // 35
    {36,36,36,36,36,36,36,36,37,36,36,36,36,36,36,36,36,36,36,36,
         36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
         36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-1,
             -1, -1},  // 36
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             31, -1},  // 37
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             34, -1},  // 38
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             47, -1},  // 39
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,65,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             -1, -1},  // 40
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             33, -1},  // 41
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             51, -1},  // 42
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             49, -1},  // 43
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,66,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 44
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,67,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 45
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,68,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 46
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,69,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 47
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,70,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 48
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,71,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 49
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              5, -1},  // 50
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,72,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 51
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              9, -1},  // 52
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,73,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 53
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,74,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 54
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,75,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 55
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             28, -1},  // 56
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             12, -1},  // 57
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         76,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 58
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,77,17,17,17,78,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 59
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,79,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 60
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,80,17,17,17,
         81,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 61
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,82,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 62
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,83,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 63
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,84,17,17,17,
         85,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 64
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,65,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
             29, -1},  // 65
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              0, -1},  // 66
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,86,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 67
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,87,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 68
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,88,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 69
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,89,17,17,90,17,17,
         91,17,17,17,17,17,17,17,17,17,17,17,17,92,17,-1,-1,-1,-1,-1,
             30, -1},  // 70
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,93,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 71
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              7, -1},  // 72
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             18, -1},  // 73
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             11, -1},  // 74
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             24, -1},  // 75
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,94,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 76
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,95,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 77
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,96,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 78
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,97,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 79
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,98,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 80
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,99,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 81
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,100,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 82
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         101,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 83
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,102,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 84
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,103,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 85
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             25, -1},  // 86
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,104,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              3, -1},  // 88
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,105,17,17,17,17,17,17,17,
         17,17,106,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 89
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,107,108,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 90
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,109,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,110,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 92
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,111,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 93
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,112,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 94
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,113,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 95
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,114,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 96
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,115,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 97
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             23, -1},  // 98
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             16, -1},  // 99
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             17, -1},  // 100
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,116,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 101
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             27, -1},  // 102
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,117,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 103
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              1, -1},  // 104
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,118,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 105
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,119,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 106
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              6, -1},  // 107
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,120,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 108
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             10, -1},  // 109
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         121,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 110
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              4, -1},  // 111
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             13, -1},  // 112
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,122,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 113
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,123,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 114
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             15, -1},  // 115
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             20, -1},  // 116
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             21, -1},  // 117
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,124,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 118
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,125,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 119
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              8, -1},  // 120
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,126,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 121
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             19, -1},  // 122
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             14, -1},  // 123
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             26, -1},  // 124
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,127,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 125
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,128,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             30, -1},  // 126
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
              2, -1},  // 127
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1,-1,-1,-1,
             22, -1},  // 128
};


int const (*LexBase::s_dfaBase_[])[62] =
{
    s_dfa_ + 0,
};

size_t LexBase::s_istreamNr = 0;

// $insert inputImplementation
LexBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

LexBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t LexBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        [[fallthrough]];

        default:
        return ch;
    }
}

size_t LexBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void LexBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void LexBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

LexBase::LexBase(std::istream &in, std::ostream &out, bool keepCwd)
:
    d_out(new std::ostream(out.rdbuf())),
// $insert interactiveInit
    d_in(0),
    d_dfaBase_(s_dfa_)
{
    if (keepCwd)
        d_cwd = std::filesystem::current_path().string();
    p_pushStream(s_istream, new std::istream(in.rdbuf()));
}

void LexBase::switchStream_(std::istream &in, size_t lineNr)
{
    d_input->close();
    d_streamStack.back().input = { new std::istream(in.rdbuf()), lineNr };
}


LexBase::LexBase(std::string const &infilename, std::string const &outfilename, bool keepCwd)
:
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_dfaBase_(s_dfa_)
{
    if (keepCwd)
        d_cwd = std::filesystem::current_path().string();

    p_pushStream(infilename, { new std::ifstream(infilename) });
    toCwd();
}

void LexBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream_(in, 1);
    switchOstream(out);
}

void LexBase::switchIstream(std::string const &infilename)
{
    d_input->close();
    d_filename = infilename;

    d_streamStack.back() = 
        StreamStruct{ chgWorkingDir(d_filename), 
                      { new std::ifstream(infilename) } };

    d_atBOL = true;
}

void LexBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void LexBase::pushStream(std::istream  &istr)
{
    p_pushStream("(istream)", new std::istream(istr.rdbuf())); //streamPtr);
}

void LexBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}



void LexBase::toCwd() const
{
    using namespace std;
    using namespace filesystem;

    if (d_cwd.empty())
        return;

    error_code ec;
    current_path(d_cwd, ec);
};

// static
std::string LexBase::chgWorkingDir(std::string const &name)     // any name
{
    using namespace std;
    using namespace filesystem;

    if (name == s_istream)                              // used with istreams
        return name;
                                                        // a filename: get its
    auto path = absolute(name);                         // full pathname

    error_code ec;
    current_path(path.parent_path(), ec);

    return path.string();                               // return the pathname
}

void LexBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack_)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_filename = name;
    d_streamStack.push_back(
                    StreamStruct{chgWorkingDir(d_filename), { streamPtr } }
                  );

    d_input = &d_streamStack.back().input;

    d_atBOL = true;
}

void LexBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void LexBase::setDebug(bool onOff)
{}

bool LexBase::debug() const
{
    return false;
}

void LexBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input->reRead(d_matched, from);
    d_matched.resize(from);
}

void LexBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


bool LexBase::popStream()
{
    using namespace std::filesystem;

    d_input->close();

    if (d_streamStack.size() <= 1)
        return false;

    d_streamStack.pop_back();

    d_filename = path{ chgWorkingDir(d_streamStack.back().pushedName) 
                     }.filename().string();

    d_input = &d_streamStack.back().input;

    return true;
}



  // See the manual's section `Run-time operations' section for an explanation
  // of this member.
LexBase::ActionType_ LexBase::actionType_(size_t range)
{
    d_nextState = d_dfaBase_[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType_::CONTINUE;

    if (knownFinalState())                  // FINAL state reached
        return ActionType_::MATCH;         

    if (d_matched.size())
        return ActionType_::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF_ ? 
                ActionType_::ECHO_CH 
            : 
                ActionType_::RETURN;
}

void LexBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input->reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

void LexBase::setMatchedSize(size_t length)
{
    d_input->reRead(d_matched, length);  // reread the tail section
    d_matched.resize(length);           // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule's index is returned.
  // The numbers behind the finalPtr assignments are explained in the 
  // manual's `Run-time operations' section.
size_t LexBase::matched_(size_t ch)
{
    d_input->reRead(ch);

    FinalData *finalPtr;
                            
    if (not d_atBOL)                    // not at BOL
        finalPtr = &d_final.std;        // then use the std rule (3, 4)

                                        // at BOL
    else if (not available(d_final.std.rule))   // only a BOL rule avail.
            finalPtr = &d_final.bol;            // use the BOL rule (6)

    else if (not available(d_final.bol.rule)) // only a std rule is avail.
        finalPtr = &d_final.std;        // use the std rule (7)
        
    else if (                           // Both are available (8)
        d_final.bol.length !=           // check lengths of matched texts
        d_final.std.length              // unequal lengths, use the rule
    )                                   // having the longer match length
        finalPtr =              
            d_final.bol.length > d_final.std.length ?
                &d_final.bol
            :
                &d_final.std;

    else                            // lengths are equal: use 1st rule
        finalPtr = 
            d_final.bol.rule < d_final.std.rule ?
                &d_final.bol
            :
                &d_final.std;

    setMatchedSize(finalPtr->length);

    d_atBOL = d_matched.back() == '\n';


    return finalPtr->rule;
}

size_t LexBase::getRange_(int ch)       // using int to prevent casts
{
    return ch == AT_EOF ? as<size_t>(s_rangeOfEOF_) : s_ranges_[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match
void LexBase::continue_(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void LexBase::echoCh_(size_t ch)
{
    *d_out << as<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void LexBase::echoFirst_(size_t ch)
{
    d_input->reRead(ch);
    d_input->reRead(d_matched, 1);
    echoCh_(d_matched[0]);
}

    // Update the rules associated with the current state, do this separately
    // for BOL and std rules.
    // If a rule was set, update the rule index and the current d_matched
    // length. 
void LexBase::updateFinals_()
{
    size_t len = d_matched.size();

    int const *rf = d_dfaBase_[d_state] + s_finIdx_;

    if (rf[0] != -1)        // update to the latest std rule
    {
        d_final.std = FinalData { as<size_t>(rf[0]), len };
    }

    if (rf[1] != -1)        // update to the latest bol rule
    {
        d_final.bol = FinalData { as<size_t>(rf[1]), len };
    }
}

void LexBase::reset_()
{
    d_final = Final{ 
                    FinalData{s_unavailable, 0}, 
                    FinalData {s_unavailable, 0} 
                };

    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int Lex::executeAction_(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 11 "lex.l"
            return Tokens::AND;
        }
        break;
        case 1:
        {
#line 12 "lex.l"
            return Tokens::CLASS;
        }
        break;
        case 2:
        {
#line 13 "lex.l"
            return Tokens::ENDCLASS;
        }
        break;
        case 3:
        {
#line 14 "lex.l"
            return Tokens::ELSE;
        }
        break;
        case 4:
        {
#line 15 "lex.l"
            return Tokens::FALSE;
        }
        break;
        case 5:
        {
#line 16 "lex.l"
            return Tokens::FN;
        }
        break;
        case 6:
        {
#line 17 "lex.l"
            return Tokens::ENDFN;
        }
        break;
        case 7:
        {
#line 18 "lex.l"
            return Tokens::FOR;
        }
        break;
        case 8:
        {
#line 19 "lex.l"
            return Tokens::ENDFOR;
        }
        break;
        case 9:
        {
#line 20 "lex.l"
            return Tokens::IF;
        }
        break;
        case 10:
        {
#line 21 "lex.l"
            return Tokens::ENDIF;
        }
        break;
        case 11:
        {
#line 22 "lex.l"
            return Tokens::NIL;
        }
        break;
        case 12:
        {
#line 23 "lex.l"
            return Tokens::OR;
        }
        break;
        case 13:
        {
#line 24 "lex.l"
            return Tokens::PRINT;
        }
        break;
        case 14:
        {
#line 25 "lex.l"
            return Tokens::RETURN;
        }
        break;
        case 15:
        {
#line 26 "lex.l"
            return Tokens::SUPER;
        }
        break;
        case 16:
        {
#line 27 "lex.l"
            return Tokens::THIS;
        }
        break;
        case 17:
        {
#line 28 "lex.l"
            return Tokens::TRUE;
        }
        break;
        case 18:
        {
#line 29 "lex.l"
            return Tokens::LET;
        }
        break;
        case 19:
        {
#line 30 "lex.l"
            return Tokens::REPEAT;
        }
        break;
        case 20:
        {
#line 31 "lex.l"
            return Tokens::UNTIL;
        }
        break;
        case 21:
        {
#line 32 "lex.l"
            return Tokens::WHILE;
        }
        break;
        case 22:
        {
#line 33 "lex.l"
            return Tokens::ENDWHILE;
        }
        break;
        case 23:
        {
#line 34 "lex.l"
            return Tokens::THEN;
        }
        break;
        case 24:
        {
#line 35 "lex.l"
            return Tokens::NOT;
        }
        break;
        case 25:
        {
#line 36 "lex.l"
            return Tokens::CASE;
        }
        break;
        case 26:
        {
#line 37 "lex.l"
            return Tokens::ENDCASE;
        }
        break;
        case 27:
        {
#line 38 "lex.l"
            return Tokens::WHEN;
        }
        break;
        case 28:
        {
#line 39 "lex.l"
            return Tokens::OF;
        }
        break;
        case 29:
        {
#line 40 "lex.l"
            return Tokens::NUMBER;
        }
        break;
        case 30:
        {
#line 41 "lex.l"
            return Tokens::IDENTIFIER;
        }
        break;
        case 31:
        {
#line 42 "lex.l"
            return Tokens::STRING;
        }
        break;
        case 32:
        {
#line 43 "lex.l"
            return Tokens::EQUAL;
        }
        break;
        case 33:
        {
#line 44 "lex.l"
            return Tokens::ASSIGN;
        }
        break;
        case 34:
        {
#line 45 "lex.l"
            return Tokens::TO;
        }
        break;
        case 35:
        {
#line 46 "lex.l"
            return Tokens::LEFT_PAREN;
        }
        break;
        case 36:
        {
#line 47 "lex.l"
            return Tokens::RIGHT_PAREN;
        }
        break;
        case 37:
        {
#line 48 "lex.l"
            return Tokens::LEFT_BRACE;
        }
        break;
        case 38:
        {
#line 49 "lex.l"
            return Tokens::RIGHT_BRACE;
        }
        break;
        case 39:
        {
#line 50 "lex.l"
            return Tokens::LEFT_BRACKET;
        }
        break;
        case 40:
        {
#line 51 "lex.l"
            return Tokens::RIGHT_BRACKET;
        }
        break;
        case 41:
        {
#line 52 "lex.l"
            return Tokens::COMMA;
        }
        break;
        case 42:
        {
#line 53 "lex.l"
            return Tokens::DOT;
        }
        break;
        case 43:
        {
#line 54 "lex.l"
            return Tokens::MINUS;
        }
        break;
        case 44:
        {
#line 55 "lex.l"
            return Tokens::PLUS;
        }
        break;
        case 45:
        {
#line 56 "lex.l"
            return Tokens::SLASH;
        }
        break;
        case 46:
        {
#line 57 "lex.l"
            return Tokens::STAR;
        }
        break;
        case 47:
        {
#line 58 "lex.l"
            return Tokens::NOT_EQUAL;
        }
        break;
        case 48:
        {
#line 59 "lex.l"
            return Tokens::GREATER;
        }
        break;
        case 49:
        {
#line 60 "lex.l"
            return Tokens::GREATER_EQUAL;
        }
        break;
        case 50:
        {
#line 61 "lex.l"
            return Tokens::LESS;
        }
        break;
        case 51:
        {
#line 62 "lex.l"
            return Tokens::LESS_EQUAL;
        }
        break;
        case 52:
        {
#line 63 "lex.l"
            accept(matched().length());
        }
        break;
        case 53:
        {
#line 64 "lex.l"
            accept(1);
        }
        break;
        case 54:
        {
#line 65 "lex.l"
            return matched()[0];
        }
        break;
    }
    noReturn_();
    return 0;
}
catch (Leave_ value)
{
    return static_cast<int>(value);
}

int Lex::lex_()
{
    reset_();
    preCode();

    while (true)
    {
        size_t ch = get_();                // fetch next char
        size_t range = getRange_(ch);      // determine the range

        updateFinals_();                    // update the state's Final info

        switch (actionType_(range))        // determine the action
        {
            case ActionType_::CONTINUE:
                continue_(ch);
            continue;

            case ActionType_::MATCH:
            {
                d_token_ = executeAction_(matched_(ch));
                if (return_())
                {
                    print();
                    toCwd();
                    return d_token_;
                }
                break;
            }

            case ActionType_::ECHO_FIRST:
                echoFirst_(ch);
            break;

            case ActionType_::ECHO_CH:
                echoCh_(ch);
            break;

            case ActionType_::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum_::END);
                     toCwd();
                     return 0;
                }
                postCode(PostEnum_::POP);
             continue;
        } // switch

        postCode(PostEnum_::WIP);

        reset_();
        preCode();
    } // while
}

void LexBase::print_() const
{
}


