// Generated by Flexc++ V2.14.00 on Sun, 28 Jan 2024 14:16:57 +0000

#ifndef Lex_H_INCLUDED_
#define Lex_H_INCLUDED_

// $insert baseclass_h
#include "Lexbase.h"

#include "../parser/Tokens.h"

// $insert classHead
class Lex: public LexBase
{
    public:
        explicit Lex(std::istream &in = std::cin, std::ostream &out = std::cout, bool keepCwd = true);

        Lex(std::string const &infile, std::string const &outfile, bool keepCwd = true);

        // $insert lexFunctionDecl
        int lex();

    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Lex::Lex(std::istream &in, std::ostream &out, bool keepCwd)
:
    LexBase(in, out, keepCwd)
{}

inline Lex::Lex(std::string const &infile, std::string const &outfile, bool keepCwd)
:
    LexBase(infile, outfile, keepCwd)
{}

// $insert inlineLexFunction
inline int Lex::lex()
{
    return lex_();
}

inline void Lex::preCode() 
{
    // optionally replace by your own code
}

inline void Lex::postCode([[maybe_unused]] PostEnum_ type) 
{
    // optionally replace by your own code
}

inline void Lex::print() 
{
    print_();
}


#endif // Lex_H_INCLUDED_

