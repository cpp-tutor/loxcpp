// Generated by Bisonc++ V6.05.00 on Sun, 28 Jan 2024 14:29:01 +0000

// base/comment

// $insert class.ih
#include "Parse.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {308, 0}, // 1: program ->  <empty>
     {308, 2}, // 2: program ->  program declaration
     {309, 1}, // 3: declaration ->  classDecl
     {309, 1}, // 4: declaration ->  funDecl
     {309, 1}, // 5: declaration ->  varDecl
     {309, 1}, // 6: declaration ->  statement
     {309, 1}, // 7: declaration (errTok_) ->  errTok_
     {310, 4}, // 8: classDecl (CLASS) ->  CLASS identifier optFunL ENDCLASS
     {310, 6}, // 9: classDecl (CLASS) ->  CLASS identifier LESS identifier optFunL ENDCLASS
     {315, 0}, // 10: optFunL ->  <empty>
     {315, 1}, // 11: optFunL ->  funList
     {316, 2}, // 12: funList ->  funList funDecl
     {316, 1}, // 13: funList ->  funDecl
     {311, 7}, // 14: funDecl (FN) ->  FN identifier LEFT_PAREN optParamL RIGHT_PAREN block ENDFN
     {311, 7}, // 15: funDecl (LET) ->  LET identifier LEFT_PAREN optParamL RIGHT_PAREN TO expression
     {317, 0}, // 16: optParamL ->  <empty>
     {317, 1}, // 17: optParamL ->  paramList
     {320, 3}, // 18: paramList (COMMA) ->  paramList COMMA identifier
     {320, 1}, // 19: paramList ->  identifier
     {312, 4}, // 20: varDecl (LET) ->  LET identifier ASSIGN expression
     {312, 4}, // 21: varDecl (LET) ->  LET identifier EQUAL expression
     {313, 1}, // 22: statement ->  exprStmt
     {313, 1}, // 23: statement ->  forStmt
     {313, 1}, // 24: statement ->  ifStmt
     {313, 1}, // 25: statement ->  printStmt
     {313, 1}, // 26: statement ->  returnStmt
     {313, 1}, // 27: statement ->  whileStmt
     {318, 0}, // 28: block ->  <empty>
     {318, 1}, // 29: block ->  blockStmts
     {327, 2}, // 30: blockStmts ->  blockStmts declaration
     {327, 1}, // 31: blockStmts ->  declaration
     {321, 1}, // 32: exprStmt ->  expression
     {324, 2}, // 33: printStmt (PRINT) ->  PRINT expression
     {325, 2}, // 34: returnStmt (RETURN) ->  RETURN optExpr
     {323, 5}, // 35: ifStmt (IF) ->  IF expression THEN block ENDIF
     {323, 7}, // 36: ifStmt (IF) ->  IF expression THEN block ELSE block ENDIF
     {326, 4}, // 37: whileStmt (WHILE) ->  WHILE expression block ENDWHILE
     {322, 4}, // 38: forStmt (FOR) ->  FOR ternary block NEXT
     {319, 1}, // 39: expression ->  assignment
     {319, 1}, // 40: expression ->  unary
     {319, 1}, // 41: expression ->  binary
     {319, 1}, // 42: expression ->  ternary
     {319, 1}, // 43: expression ->  logical
     {319, 1}, // 44: expression ->  primary
     {319, 1}, // 45: expression ->  call
     {330, 3}, // 46: assignment (ASSIGN) ->  identifier ASSIGN expression
     {330, 5}, // 47: assignment (DOT) ->  primary DOT identifier ASSIGN expression
     {330, 5}, // 48: assignment (DOT) ->  call DOT identifier ASSIGN expression
     {331, 2}, // 49: unary (NOT) ->  NOT expression
     {331, 2}, // 50: unary (UMINUS) ->  MINUS expression
     {332, 3}, // 51: binary (EQUAL_EQUAL) ->  expression EQUAL expression
     {332, 3}, // 52: binary (NOT_EQUAL) ->  expression NOT_EQUAL expression
     {332, 3}, // 53: binary (LESS) ->  expression LESS expression
     {332, 3}, // 54: binary (LESS_EQUAL) ->  expression LESS_EQUAL expression
     {332, 3}, // 55: binary (GREATER) ->  expression GREATER expression
     {332, 3}, // 56: binary (GREATER_EQUAL) ->  expression GREATER_EQUAL expression
     {332, 3}, // 57: binary (PLUS) ->  expression PLUS expression
     {332, 3}, // 58: binary (MINUS) ->  expression MINUS expression
     {332, 3}, // 59: binary (STAR) ->  expression STAR expression
     {332, 3}, // 60: binary (SLASH) ->  expression SLASH expression
     {329, 5}, // 61: ternary (LESS) ->  expression LESS identifier LESS expression
     {329, 5}, // 62: ternary (LESS) ->  expression LESS identifier LESS_EQUAL expression
     {329, 5}, // 63: ternary (LESS_EQUAL) ->  expression LESS_EQUAL identifier LESS expression
     {329, 5}, // 64: ternary (LESS_EQUAL) ->  expression LESS_EQUAL identifier LESS_EQUAL expression
     {333, 3}, // 65: logical (OR) ->  expression OR expression
     {333, 3}, // 66: logical (AND) ->  expression AND expression
     {334, 1}, // 67: primary ->  identifier
     {334, 1}, // 68: primary (NUMBER) ->  NUMBER
     {334, 1}, // 69: primary (STRING) ->  STRING
     {334, 1}, // 70: primary (TRUE) ->  TRUE
     {334, 1}, // 71: primary (FALSE) ->  FALSE
     {334, 1}, // 72: primary (NIL) ->  NIL
     {334, 3}, // 73: primary (LEFT_PAREN) ->  LEFT_PAREN expression RIGHT_PAREN
     {334, 1}, // 74: primary (THIS) ->  THIS
     {334, 3}, // 75: primary (SUPER) ->  SUPER DOT identifier
     {314, 1}, // 76: identifier (IDENTIFIER) ->  IDENTIFIER
     {335, 2}, // 77: call ->  primary getList
     {337, 0}, // 78: optExprL ->  <empty>
     {337, 1}, // 79: optExprL ->  exprList
     {338, 3}, // 80: exprList (COMMA) ->  exprList COMMA expression
     {338, 1}, // 81: exprList ->  expression
     {336, 3}, // 82: getList (DOT) ->  getList DOT identifier
     {336, 4}, // 83: getList (LEFT_PAREN) ->  getList LEFT_PAREN optExprL RIGHT_PAREN
     {336, 2}, // 84: getList (DOT) ->  DOT identifier
     {336, 3}, // 85: getList (LEFT_PAREN) ->  LEFT_PAREN optExprL RIGHT_PAREN
     {328, 0}, // 86: optExpr ->  <empty>
     {328, 1}, // 87: optExpr ->  expression
     {339, 1}, // 88: program_$ ->  program
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { DEF_RED}, {  2} },           
    { {     308}, {  1} }, // program
    { {       0}, { -1} },           
};

SR_ s_1[] =
{
    { { ERR_REQ}, {      42} },               
    { {     309}, {       2} }, // declaration
    { {     310}, {       3} }, // classDecl  
    { {     311}, {       4} }, // funDecl    
    { {     312}, {       5} }, // varDecl    
    { {     313}, {       6} }, // statement  
    { { errTok_}, {       7} }, // errTok_    
    { {     269}, {       8} }, // CLASS      
    { {     273}, {       9} }, // FN         
    { {     286}, {      10} }, // LET        
    { {     321}, {      11} }, // exprStmt   
    { {     322}, {      12} }, // forStmt    
    { {     323}, {      13} }, // ifStmt     
    { {     324}, {      14} }, // printStmt  
    { {     325}, {      15} }, // returnStmt 
    { {     326}, {      16} }, // whileStmt  
    { {     319}, {      17} }, // expression 
    { {     275}, {      18} }, // FOR        
    { {     277}, {      19} }, // IF         
    { {     281}, {      20} }, // PRINT      
    { {     282}, {      21} }, // RETURN     
    { {     288}, {      22} }, // WHILE      
    { {     330}, {      23} }, // assignment 
    { {     331}, {      24} }, // unary      
    { {     332}, {      25} }, // binary     
    { {     329}, {      26} }, // ternary    
    { {     333}, {      27} }, // logical    
    { {     334}, {      28} }, // primary    
    { {     335}, {      29} }, // call       
    { {     314}, {      30} }, // identifier 
    { {     306}, {      31} }, // NOT        
    { {     302}, {      32} }, // MINUS      
    { {     268}, {      33} }, // NUMBER     
    { {     267}, {      34} }, // STRING     
    { {     285}, {      35} }, // TRUE       
    { {     272}, {      36} }, // FALSE      
    { {     280}, {      37} }, // NIL        
    { {     257}, {      38} }, // LEFT_PAREN 
    { {     284}, {      39} }, // THIS       
    { {     283}, {      40} }, // SUPER      
    { {     266}, {      41} }, // IDENTIFIER 
    { {    EOF_}, { ACCEPT_} },               
    { {       0}, {       0} },               
};

SR_ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR_ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR_ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR_ s_8[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       314}, { 42} }, // identifier
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_9[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       314}, { 43} }, // identifier
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_10[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       314}, { 44} }, // identifier
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR_ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR_ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR_ s_17[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -32} },                 
};

SR_ s_18[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       329}, { 57} }, // ternary   
    { {       319}, { 58} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_19[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 59} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 60} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_21[] =
{
    { { REQ_DEF}, {  22} },              
    { {     328}, {  61} }, // optExpr   
    { {     319}, {  62} }, // expression
    { {     330}, {  23} }, // assignment
    { {     331}, {  24} }, // unary     
    { {     332}, {  25} }, // binary    
    { {     329}, {  26} }, // ternary   
    { {     333}, {  27} }, // logical   
    { {     334}, {  28} }, // primary   
    { {     335}, {  29} }, // call      
    { {     314}, {  30} }, // identifier
    { {     306}, {  31} }, // NOT       
    { {     302}, {  32} }, // MINUS     
    { {     268}, {  33} }, // NUMBER    
    { {     267}, {  34} }, // STRING    
    { {     285}, {  35} }, // TRUE      
    { {     272}, {  36} }, // FALSE     
    { {     280}, {  37} }, // NIL       
    { {     257}, {  38} }, // LEFT_PAREN
    { {     284}, {  39} }, // THIS      
    { {     283}, {  40} }, // SUPER     
    { {     266}, {  41} }, // IDENTIFIER
    { {       0}, { -86} },              
};

SR_ s_22[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 63} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR_ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR_ s_28[] =
{
    { { REQ_DEF}, {   4} },              
    { {     264}, {  64} }, // DOT       
    { {     336}, {  65} }, // getList   
    { {     257}, {  66} }, // LEFT_PAREN
    { {       0}, { -44} },              
};

SR_ s_29[] =
{
    { { REQ_DEF}, {   2} },       
    { {     264}, {  67} }, // DOT
    { {       0}, { -45} },       
};

SR_ s_30[] =
{
    { { REQ_DEF}, {   2} },          
    { {     293}, {  68} }, // ASSIGN
    { {       0}, { -67} },          
};

SR_ s_31[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 69} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_32[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 70} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR_ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR_ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR_ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR_ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR_ s_38[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 71} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR_ s_40[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       264}, { 72} }, // DOT
    { {         0}, {  0} },       
};

SR_ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR_ s_42[] =
{
    { { REQ_DEF}, {   7} },           
    { {     315}, {  73} }, // optFunL
    { {     300}, {  74} }, // LESS   
    { {     316}, {  75} }, // funList
    { {     311}, {  76} }, // funDecl
    { {     273}, {   9} }, // FN     
    { {     286}, {  77} }, // LET    
    { {       0}, { -10} },           
};

SR_ s_43[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       257}, { 78} }, // LEFT_PAREN
    { {         0}, {  0} },              
};

SR_ s_44[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       257}, { 79} }, // LEFT_PAREN
    { {       293}, { 80} }, // ASSIGN    
    { {       292}, { 81} }, // EQUAL     
    { {         0}, {  0} },              
};

SR_ s_45[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 82} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_46[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 83} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_47[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 84} }, // expression
    { {       314}, { 85} }, // identifier
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       266}, { 41} }, // IDENTIFIER
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {         0}, {  0} },              
};

SR_ s_48[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 86} }, // expression
    { {       314}, { 87} }, // identifier
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       266}, { 41} }, // IDENTIFIER
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {         0}, {  0} },              
};

SR_ s_49[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 88} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_50[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 89} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_51[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 90} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_52[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 91} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_53[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 92} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_54[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 93} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_55[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 94} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_56[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       319}, { 95} }, // expression
    { {       330}, { 23} }, // assignment
    { {       331}, { 24} }, // unary     
    { {       332}, { 25} }, // binary    
    { {       329}, { 26} }, // ternary   
    { {       333}, { 27} }, // logical   
    { {       334}, { 28} }, // primary   
    { {       335}, { 29} }, // call      
    { {       314}, { 30} }, // identifier
    { {       306}, { 31} }, // NOT       
    { {       302}, { 32} }, // MINUS     
    { {       268}, { 33} }, // NUMBER    
    { {       267}, { 34} }, // STRING    
    { {       285}, { 35} }, // TRUE      
    { {       272}, { 36} }, // FALSE     
    { {       280}, { 37} }, // NIL       
    { {       257}, { 38} }, // LEFT_PAREN
    { {       284}, { 39} }, // THIS      
    { {       283}, { 40} }, // SUPER     
    { {       266}, { 41} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_57[] =
{
    { { ERR_REQ_DEF}, {  54} },               
    { {         318}, {  96} }, // block      
    { {         327}, {  97} }, // blockStmts 
    { {         309}, {  98} }, // declaration
    { {         310}, {   3} }, // classDecl  
    { {         311}, {   4} }, // funDecl    
    { {         312}, {   5} }, // varDecl    
    { {         313}, {   6} }, // statement  
    { {     errTok_}, {   7} }, // errTok_    
    { {         269}, {   8} }, // CLASS      
    { {         273}, {   9} }, // FN         
    { {         286}, {  10} }, // LET        
    { {         321}, {  11} }, // exprStmt   
    { {         322}, {  12} }, // forStmt    
    { {         323}, {  13} }, // ifStmt     
    { {         324}, {  14} }, // printStmt  
    { {         325}, {  15} }, // returnStmt 
    { {         326}, {  16} }, // whileStmt  
    { {         319}, {  17} }, // expression 
    { {         275}, {  18} }, // FOR        
    { {         277}, {  19} }, // IF         
    { {         281}, {  20} }, // PRINT      
    { {         282}, {  21} }, // RETURN     
    { {         288}, {  22} }, // WHILE      
    { {         330}, {  23} }, // assignment 
    { {         331}, {  24} }, // unary      
    { {         332}, {  25} }, // binary     
    { {         329}, {  26} }, // ternary    
    { {         333}, {  27} }, // logical    
    { {         334}, {  28} }, // primary    
    { {         335}, {  29} }, // call       
    { {         314}, {  30} }, // identifier 
    { {         306}, {  31} }, // NOT        
    { {         302}, {  32} }, // MINUS      
    { {         268}, {  33} }, // NUMBER     
    { {         267}, {  34} }, // STRING     
    { {         285}, {  35} }, // TRUE       
    { {         272}, {  36} }, // FALSE      
    { {         280}, {  37} }, // NIL        
    { {         257}, {  38} }, // LEFT_PAREN 
    { {         284}, {  39} }, // THIS       
    { {         283}, {  40} }, // SUPER      
    { {         266}, {  41} }, // IDENTIFIER 
    { {         276}, { -28} }, // NEXT       
    { {           0}, { -42} },               
};

SR_ s_58[] =
{
    { { REQ_TOKEN}, { 13} },                 
    { {       300}, { 47} }, // LESS         
    { {       301}, { 48} }, // LESS_EQUAL   
    { {       292}, { 45} }, // EQUAL        
    { {       296}, { 46} }, // NOT_EQUAL    
    { {       298}, { 49} }, // GREATER      
    { {       299}, { 50} }, // GREATER_EQUAL
    { {       303}, { 51} }, // PLUS         
    { {       302}, { 52} }, // MINUS        
    { {       305}, { 53} }, // STAR         
    { {       304}, { 54} }, // SLASH        
    { {       294}, { 55} }, // OR           
    { {       295}, { 56} }, // AND          
    { {         0}, {  0} },                 
};

SR_ s_59[] =
{
    { { REQ_TOKEN}, { 14} },                 
    { {       278}, { 99} }, // THEN         
    { {       292}, { 45} }, // EQUAL        
    { {       296}, { 46} }, // NOT_EQUAL    
    { {       300}, { 47} }, // LESS         
    { {       301}, { 48} }, // LESS_EQUAL   
    { {       298}, { 49} }, // GREATER      
    { {       299}, { 50} }, // GREATER_EQUAL
    { {       303}, { 51} }, // PLUS         
    { {       302}, { 52} }, // MINUS        
    { {       305}, { 53} }, // STAR         
    { {       304}, { 54} }, // SLASH        
    { {       294}, { 55} }, // OR           
    { {       295}, { 56} }, // AND          
    { {         0}, {  0} },                 
};

SR_ s_60[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -33} },                 
};

SR_ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_62[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -87} },                 
};

SR_ s_63[] =
{
    { { ERR_REQ_DEF}, {  54} },                 
    { {         318}, { 100} }, // block        
    { {         292}, {  45} }, // EQUAL        
    { {         296}, {  46} }, // NOT_EQUAL    
    { {         300}, {  47} }, // LESS         
    { {         301}, {  48} }, // LESS_EQUAL   
    { {         298}, {  49} }, // GREATER      
    { {         299}, {  50} }, // GREATER_EQUAL
    { {         303}, {  51} }, // PLUS         
    { {         302}, { 101} }, // MINUS        
    { {         305}, {  53} }, // STAR         
    { {         304}, {  54} }, // SLASH        
    { {         294}, {  55} }, // OR           
    { {         295}, {  56} }, // AND          
    { {         327}, {  97} }, // blockStmts   
    { {         309}, {  98} }, // declaration  
    { {         310}, {   3} }, // classDecl    
    { {         311}, {   4} }, // funDecl      
    { {         312}, {   5} }, // varDecl      
    { {         313}, {   6} }, // statement    
    { {     errTok_}, {   7} }, // errTok_      
    { {         269}, {   8} }, // CLASS        
    { {         273}, {   9} }, // FN           
    { {         286}, {  10} }, // LET          
    { {         321}, {  11} }, // exprStmt     
    { {         322}, {  12} }, // forStmt      
    { {         323}, {  13} }, // ifStmt       
    { {         324}, {  14} }, // printStmt    
    { {         325}, {  15} }, // returnStmt   
    { {         326}, {  16} }, // whileStmt    
    { {         319}, {  17} }, // expression   
    { {         275}, {  18} }, // FOR          
    { {         277}, {  19} }, // IF           
    { {         281}, {  20} }, // PRINT        
    { {         282}, {  21} }, // RETURN       
    { {         288}, {  22} }, // WHILE        
    { {         330}, {  23} }, // assignment   
    { {         331}, {  24} }, // unary        
    { {         332}, {  25} }, // binary       
    { {         329}, {  26} }, // ternary      
    { {         333}, {  27} }, // logical      
    { {         334}, {  28} }, // primary      
    { {         335}, {  29} }, // call         
    { {         314}, {  30} }, // identifier   
    { {         306}, {  31} }, // NOT          
    { {         268}, {  33} }, // NUMBER       
    { {         267}, {  34} }, // STRING       
    { {         285}, {  35} }, // TRUE         
    { {         272}, {  36} }, // FALSE        
    { {         280}, {  37} }, // NIL          
    { {         257}, {  38} }, // LEFT_PAREN   
    { {         284}, {  39} }, // THIS         
    { {         283}, {  40} }, // SUPER        
    { {         266}, {  41} }, // IDENTIFIER   
    { {           0}, { -28} },                 
};

SR_ s_64[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 102} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_65[] =
{
    { { REQ_DEF}, {   3} },              
    { {     264}, { 103} }, // DOT       
    { {     257}, { 104} }, // LEFT_PAREN
    { {       0}, { -77} },              
};

SR_ s_66[] =
{
    { { REQ_DEF}, {  23} },              
    { {     337}, { 105} }, // optExprL  
    { {     338}, { 106} }, // exprList  
    { {     319}, { 107} }, // expression
    { {     330}, {  23} }, // assignment
    { {     331}, {  24} }, // unary     
    { {     332}, {  25} }, // binary    
    { {     329}, {  26} }, // ternary   
    { {     333}, {  27} }, // logical   
    { {     334}, {  28} }, // primary   
    { {     335}, {  29} }, // call      
    { {     314}, {  30} }, // identifier
    { {     306}, {  31} }, // NOT       
    { {     302}, {  32} }, // MINUS     
    { {     268}, {  33} }, // NUMBER    
    { {     267}, {  34} }, // STRING    
    { {     285}, {  35} }, // TRUE      
    { {     272}, {  36} }, // FALSE     
    { {     280}, {  37} }, // NIL       
    { {     257}, {  38} }, // LEFT_PAREN
    { {     284}, {  39} }, // THIS      
    { {     283}, {  40} }, // SUPER     
    { {     266}, {  41} }, // IDENTIFIER
    { {       0}, { -78} },              
};

SR_ s_67[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 108} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_68[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 109} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_69[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -49} }, 
};

SR_ s_70[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_71[] =
{
    { { REQ_TOKEN}, {  14} },                 
    { {       258}, { 110} }, // RIGHT_PAREN  
    { {       292}, {  45} }, // EQUAL        
    { {       296}, {  46} }, // NOT_EQUAL    
    { {       300}, {  47} }, // LESS         
    { {       301}, {  48} }, // LESS_EQUAL   
    { {       298}, {  49} }, // GREATER      
    { {       299}, {  50} }, // GREATER_EQUAL
    { {       303}, {  51} }, // PLUS         
    { {       302}, {  52} }, // MINUS        
    { {       305}, {  53} }, // STAR         
    { {       304}, {  54} }, // SLASH        
    { {       294}, {  55} }, // OR           
    { {       295}, {  56} }, // AND          
    { {         0}, {   0} },                 
};

SR_ s_72[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 111} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_73[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       270}, { 112} }, // ENDCLASS
    { {         0}, {   0} },            
};

SR_ s_74[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 113} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_75[] =
{
    { { REQ_DEF}, {   4} },           
    { {     311}, { 114} }, // funDecl
    { {     273}, {   9} }, // FN     
    { {     286}, {  77} }, // LET    
    { {       0}, { -11} },           
};

SR_ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_77[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 115} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_78[] =
{
    { { REQ_DEF}, {   5} },              
    { {     317}, { 116} }, // optParamL 
    { {     320}, { 117} }, // paramList 
    { {     314}, { 118} }, // identifier
    { {     266}, {  41} }, // IDENTIFIER
    { {       0}, { -16} },              
};

SR_ s_79[] =
{
    { { REQ_DEF}, {   5} },              
    { {     317}, { 119} }, // optParamL 
    { {     320}, { 117} }, // paramList 
    { {     314}, { 118} }, // identifier
    { {     266}, {  41} }, // IDENTIFIER
    { {       0}, { -16} },              
};

SR_ s_80[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 120} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_81[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 121} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_82[] =
{
    { { REQ_DEF}, {   9} },                 
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {       0}, { -51} },                 
};

SR_ s_83[] =
{
    { { REQ_DEF}, {   9} },                 
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {       0}, { -52} },                 
};

SR_ s_84[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -53} },         
};

SR_ s_85[] =
{
    { { REQ_DEF}, {   4} },              
    { {     300}, { 122} }, // LESS      
    { {     301}, { 123} }, // LESS_EQUAL
    { {     293}, {  68} }, // ASSIGN    
    { {       0}, { -67} },              
};

SR_ s_86[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -54} },         
};

SR_ s_87[] =
{
    { { REQ_DEF}, {   4} },              
    { {     300}, { 124} }, // LESS      
    { {     301}, { 125} }, // LESS_EQUAL
    { {     293}, {  68} }, // ASSIGN    
    { {       0}, { -67} },              
};

SR_ s_88[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -55} },         
};

SR_ s_89[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -56} },         
};

SR_ s_90[] =
{
    { { REQ_DEF}, {   3} },         
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -57} },         
};

SR_ s_91[] =
{
    { { REQ_DEF}, {   3} },         
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -58} },         
};

SR_ s_92[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -59} }, 
};

SR_ s_93[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -60} }, 
};

SR_ s_94[] =
{
    { { REQ_DEF}, {  11} },                 
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     295}, {  56} }, // AND          
    { {       0}, { -65} },                 
};

SR_ s_95[] =
{
    { { REQ_DEF}, {  10} },                 
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {       0}, { -66} },                 
};

SR_ s_96[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       276}, { 126} }, // NEXT
    { {         0}, {   0} },        
};

SR_ s_97[] =
{
    { { ERR_REQ_DEF}, {  41} },               
    { {         309}, { 127} }, // declaration
    { {         310}, {   3} }, // classDecl  
    { {         311}, {   4} }, // funDecl    
    { {         312}, {   5} }, // varDecl    
    { {         313}, {   6} }, // statement  
    { {     errTok_}, {   7} }, // errTok_    
    { {         269}, {   8} }, // CLASS      
    { {         273}, {   9} }, // FN         
    { {         286}, {  10} }, // LET        
    { {         321}, {  11} }, // exprStmt   
    { {         322}, {  12} }, // forStmt    
    { {         323}, {  13} }, // ifStmt     
    { {         324}, {  14} }, // printStmt  
    { {         325}, {  15} }, // returnStmt 
    { {         326}, {  16} }, // whileStmt  
    { {         319}, {  17} }, // expression 
    { {         275}, {  18} }, // FOR        
    { {         277}, {  19} }, // IF         
    { {         281}, {  20} }, // PRINT      
    { {         282}, {  21} }, // RETURN     
    { {         288}, {  22} }, // WHILE      
    { {         330}, {  23} }, // assignment 
    { {         331}, {  24} }, // unary      
    { {         332}, {  25} }, // binary     
    { {         329}, {  26} }, // ternary    
    { {         333}, {  27} }, // logical    
    { {         334}, {  28} }, // primary    
    { {         335}, {  29} }, // call       
    { {         314}, {  30} }, // identifier 
    { {         306}, {  31} }, // NOT        
    { {         302}, {  32} }, // MINUS      
    { {         268}, {  33} }, // NUMBER     
    { {         267}, {  34} }, // STRING     
    { {         285}, {  35} }, // TRUE       
    { {         272}, {  36} }, // FALSE      
    { {         280}, {  37} }, // NIL        
    { {         257}, {  38} }, // LEFT_PAREN 
    { {         284}, {  39} }, // THIS       
    { {         283}, {  40} }, // SUPER      
    { {         266}, {  41} }, // IDENTIFIER 
    { {           0}, { -29} },               
};

SR_ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_99[] =
{
    { { ERR_REQ_DEF}, {  43} },               
    { {         318}, { 128} }, // block      
    { {         327}, {  97} }, // blockStmts 
    { {         309}, {  98} }, // declaration
    { {         310}, {   3} }, // classDecl  
    { {         311}, {   4} }, // funDecl    
    { {         312}, {   5} }, // varDecl    
    { {         313}, {   6} }, // statement  
    { {     errTok_}, {   7} }, // errTok_    
    { {         269}, {   8} }, // CLASS      
    { {         273}, {   9} }, // FN         
    { {         286}, {  10} }, // LET        
    { {         321}, {  11} }, // exprStmt   
    { {         322}, {  12} }, // forStmt    
    { {         323}, {  13} }, // ifStmt     
    { {         324}, {  14} }, // printStmt  
    { {         325}, {  15} }, // returnStmt 
    { {         326}, {  16} }, // whileStmt  
    { {         319}, {  17} }, // expression 
    { {         275}, {  18} }, // FOR        
    { {         277}, {  19} }, // IF         
    { {         281}, {  20} }, // PRINT      
    { {         282}, {  21} }, // RETURN     
    { {         288}, {  22} }, // WHILE      
    { {         330}, {  23} }, // assignment 
    { {         331}, {  24} }, // unary      
    { {         332}, {  25} }, // binary     
    { {         329}, {  26} }, // ternary    
    { {         333}, {  27} }, // logical    
    { {         334}, {  28} }, // primary    
    { {         335}, {  29} }, // call       
    { {         314}, {  30} }, // identifier 
    { {         306}, {  31} }, // NOT        
    { {         302}, {  32} }, // MINUS      
    { {         268}, {  33} }, // NUMBER     
    { {         267}, {  34} }, // STRING     
    { {         285}, {  35} }, // TRUE       
    { {         272}, {  36} }, // FALSE      
    { {         280}, {  37} }, // NIL        
    { {         257}, {  38} }, // LEFT_PAREN 
    { {         284}, {  39} }, // THIS       
    { {         283}, {  40} }, // SUPER      
    { {         266}, {  41} }, // IDENTIFIER 
    { {           0}, { -28} },               
};

SR_ s_100[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       289}, { 129} }, // ENDWHILE
    { {         0}, {   0} },            
};

SR_ s_101[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 130} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_102[] =
{
    { { REQ_DEF}, {   2} },          
    { {     293}, { 131} }, // ASSIGN
    { {       0}, { -84} },          
};

SR_ s_103[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 132} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_104[] =
{
    { { REQ_DEF}, {  23} },              
    { {     337}, { 133} }, // optExprL  
    { {     338}, { 106} }, // exprList  
    { {     319}, { 107} }, // expression
    { {     330}, {  23} }, // assignment
    { {     331}, {  24} }, // unary     
    { {     332}, {  25} }, // binary    
    { {     329}, {  26} }, // ternary   
    { {     333}, {  27} }, // logical   
    { {     334}, {  28} }, // primary   
    { {     335}, {  29} }, // call      
    { {     314}, {  30} }, // identifier
    { {     306}, {  31} }, // NOT       
    { {     302}, {  32} }, // MINUS     
    { {     268}, {  33} }, // NUMBER    
    { {     267}, {  34} }, // STRING    
    { {     285}, {  35} }, // TRUE      
    { {     272}, {  36} }, // FALSE     
    { {     280}, {  37} }, // NIL       
    { {     257}, {  38} }, // LEFT_PAREN
    { {     284}, {  39} }, // THIS      
    { {     283}, {  40} }, // SUPER     
    { {     266}, {  41} }, // IDENTIFIER
    { {       0}, { -78} },              
};

SR_ s_105[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       258}, { 134} }, // RIGHT_PAREN
    { {         0}, {   0} },               
};

SR_ s_106[] =
{
    { { REQ_DEF}, {   2} },         
    { {     263}, { 135} }, // COMMA
    { {       0}, { -79} },         
};

SR_ s_107[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -81} },                 
};

SR_ s_108[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       293}, { 136} }, // ASSIGN
    { {         0}, {   0} },          
};

SR_ s_109[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -46} },                 
};

SR_ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR_ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR_ s_112[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR_ s_113[] =
{
    { { REQ_DEF}, {   6} },           
    { {     315}, { 137} }, // optFunL
    { {     316}, {  75} }, // funList
    { {     311}, {  76} }, // funDecl
    { {     273}, {   9} }, // FN     
    { {     286}, {  77} }, // LET    
    { {       0}, { -10} },           
};

SR_ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_115[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       257}, { 79} }, // LEFT_PAREN
    { {         0}, {  0} },              
};

SR_ s_116[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       258}, { 138} }, // RIGHT_PAREN
    { {         0}, {   0} },               
};

SR_ s_117[] =
{
    { { REQ_DEF}, {   2} },         
    { {     263}, { 139} }, // COMMA
    { {       0}, { -17} },         
};

SR_ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_119[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       258}, { 140} }, // RIGHT_PAREN
    { {         0}, {   0} },               
};

SR_ s_120[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -20} },                 
};

SR_ s_121[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -21} },                 
};

SR_ s_122[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 141} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_123[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 142} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_124[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 143} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_125[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 144} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_126[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR_ s_127[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_128[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       279}, { 145} }, // ENDIF
    { {       271}, { 146} }, // ELSE 
    { {         0}, {   0} },         
};

SR_ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_130[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_131[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 147} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR_ s_133[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       258}, { 148} }, // RIGHT_PAREN
    { {         0}, {   0} },               
};

SR_ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR_ s_135[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 149} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_136[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 150} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_137[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       270}, { 151} }, // ENDCLASS
    { {         0}, {   0} },            
};

SR_ s_138[] =
{
    { { ERR_REQ_DEF}, {  43} },               
    { {         318}, { 152} }, // block      
    { {         327}, {  97} }, // blockStmts 
    { {         309}, {  98} }, // declaration
    { {         310}, {   3} }, // classDecl  
    { {         311}, {   4} }, // funDecl    
    { {         312}, {   5} }, // varDecl    
    { {         313}, {   6} }, // statement  
    { {     errTok_}, {   7} }, // errTok_    
    { {         269}, {   8} }, // CLASS      
    { {         273}, {   9} }, // FN         
    { {         286}, {  10} }, // LET        
    { {         321}, {  11} }, // exprStmt   
    { {         322}, {  12} }, // forStmt    
    { {         323}, {  13} }, // ifStmt     
    { {         324}, {  14} }, // printStmt  
    { {         325}, {  15} }, // returnStmt 
    { {         326}, {  16} }, // whileStmt  
    { {         319}, {  17} }, // expression 
    { {         275}, {  18} }, // FOR        
    { {         277}, {  19} }, // IF         
    { {         281}, {  20} }, // PRINT      
    { {         282}, {  21} }, // RETURN     
    { {         288}, {  22} }, // WHILE      
    { {         330}, {  23} }, // assignment 
    { {         331}, {  24} }, // unary      
    { {         332}, {  25} }, // binary     
    { {         329}, {  26} }, // ternary    
    { {         333}, {  27} }, // logical    
    { {         334}, {  28} }, // primary    
    { {         335}, {  29} }, // call       
    { {         314}, {  30} }, // identifier 
    { {         306}, {  31} }, // NOT        
    { {         302}, {  32} }, // MINUS      
    { {         268}, {  33} }, // NUMBER     
    { {         267}, {  34} }, // STRING     
    { {         285}, {  35} }, // TRUE       
    { {         272}, {  36} }, // FALSE      
    { {         280}, {  37} }, // NIL        
    { {         257}, {  38} }, // LEFT_PAREN 
    { {         284}, {  39} }, // THIS       
    { {         283}, {  40} }, // SUPER      
    { {         266}, {  41} }, // IDENTIFIER 
    { {           0}, { -28} },               
};

SR_ s_139[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       314}, { 153} }, // identifier
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_140[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       287}, { 154} }, // TO
    { {         0}, {   0} },      
};

SR_ s_141[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -61} },         
};

SR_ s_142[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -62} },         
};

SR_ s_143[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -63} },         
};

SR_ s_144[] =
{
    { { REQ_DEF}, {   5} },         
    { {     303}, {  51} }, // PLUS 
    { {     302}, {  52} }, // MINUS
    { {     305}, {  53} }, // STAR 
    { {     304}, {  54} }, // SLASH
    { {       0}, { -64} },         
};

SR_ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR_ s_146[] =
{
    { { ERR_REQ_DEF}, {  43} },               
    { {         318}, { 155} }, // block      
    { {         327}, {  97} }, // blockStmts 
    { {         309}, {  98} }, // declaration
    { {         310}, {   3} }, // classDecl  
    { {         311}, {   4} }, // funDecl    
    { {         312}, {   5} }, // varDecl    
    { {         313}, {   6} }, // statement  
    { {     errTok_}, {   7} }, // errTok_    
    { {         269}, {   8} }, // CLASS      
    { {         273}, {   9} }, // FN         
    { {         286}, {  10} }, // LET        
    { {         321}, {  11} }, // exprStmt   
    { {         322}, {  12} }, // forStmt    
    { {         323}, {  13} }, // ifStmt     
    { {         324}, {  14} }, // printStmt  
    { {         325}, {  15} }, // returnStmt 
    { {         326}, {  16} }, // whileStmt  
    { {         319}, {  17} }, // expression 
    { {         275}, {  18} }, // FOR        
    { {         277}, {  19} }, // IF         
    { {         281}, {  20} }, // PRINT      
    { {         282}, {  21} }, // RETURN     
    { {         288}, {  22} }, // WHILE      
    { {         330}, {  23} }, // assignment 
    { {         331}, {  24} }, // unary      
    { {         332}, {  25} }, // binary     
    { {         329}, {  26} }, // ternary    
    { {         333}, {  27} }, // logical    
    { {         334}, {  28} }, // primary    
    { {         335}, {  29} }, // call       
    { {         314}, {  30} }, // identifier 
    { {         306}, {  31} }, // NOT        
    { {         302}, {  32} }, // MINUS      
    { {         268}, {  33} }, // NUMBER     
    { {         267}, {  34} }, // STRING     
    { {         285}, {  35} }, // TRUE       
    { {         272}, {  36} }, // FALSE      
    { {         280}, {  37} }, // NIL        
    { {         257}, {  38} }, // LEFT_PAREN 
    { {         284}, {  39} }, // THIS       
    { {         283}, {  40} }, // SUPER      
    { {         266}, {  41} }, // IDENTIFIER 
    { {           0}, { -28} },               
};

SR_ s_147[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -47} },                 
};

SR_ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR_ s_149[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -80} },                 
};

SR_ s_150[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -48} },                 
};

SR_ s_151[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR_ s_152[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       274}, { 156} }, // ENDFN
    { {         0}, {   0} },         
};

SR_ s_153[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_154[] =
{
    { { REQ_TOKEN}, {  21} },              
    { {       319}, { 157} }, // expression
    { {       330}, {  23} }, // assignment
    { {       331}, {  24} }, // unary     
    { {       332}, {  25} }, // binary    
    { {       329}, {  26} }, // ternary   
    { {       333}, {  27} }, // logical   
    { {       334}, {  28} }, // primary   
    { {       335}, {  29} }, // call      
    { {       314}, {  30} }, // identifier
    { {       306}, {  31} }, // NOT       
    { {       302}, {  32} }, // MINUS     
    { {       268}, {  33} }, // NUMBER    
    { {       267}, {  34} }, // STRING    
    { {       285}, {  35} }, // TRUE      
    { {       272}, {  36} }, // FALSE     
    { {       280}, {  37} }, // NIL       
    { {       257}, {  38} }, // LEFT_PAREN
    { {       284}, {  39} }, // THIS      
    { {       283}, {  40} }, // SUPER     
    { {       266}, {  41} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_155[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       279}, { 158} }, // ENDIF
    { {         0}, {   0} },         
};

SR_ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_157[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     292}, {  45} }, // EQUAL        
    { {     296}, {  46} }, // NOT_EQUAL    
    { {     300}, {  47} }, // LESS         
    { {     301}, {  48} }, // LESS_EQUAL   
    { {     298}, {  49} }, // GREATER      
    { {     299}, {  50} }, // GREATER_EQUAL
    { {     303}, {  51} }, // PLUS         
    { {     302}, {  52} }, // MINUS        
    { {     305}, {  53} }, // STAR         
    { {     304}, {  54} }, // SLASH        
    { {     294}, {  55} }, // OR           
    { {     295}, {  56} }, // AND          
    { {       0}, { -15} },                 
};

SR_ s_158[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParseBase::ParseBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
}

// base/clearin
void ParseBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParseBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParseBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParseBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParseBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParseBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParseBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParseBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParseBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParseBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParseBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParseBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParseBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParseBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parse::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parse::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 30 "parse.y"
        { if (action_stmt) (*action_stmt)(std::dynamic_pointer_cast<Stmt>(vs_(0))); }
        break;

        case 3:
#line 34 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 4:
#line 35 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 5:
#line 36 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 6:
#line 37 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 7:
#line 38 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 8:
#line 40 "parse.y"
        { d_val_ = vs_(-1); std::dynamic_pointer_cast<StmtClass>(d_val_)->setName(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get())); }
        break;

        case 9:
#line 41 "parse.y"
        { d_val_ = vs_(-1); std::dynamic_pointer_cast<StmtClass>(d_val_)->setName(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-4))->get())); std::dynamic_pointer_cast<StmtClass>(d_val_)->setSuper(std::make_shared<ExprVariable>(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()))); }
        break;

        case 10:
#line 44 "parse.y"
        { d_val_ = std::make_shared<StmtClass>(); }
        break;

        case 11:
#line 46 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 12:
#line 48 "parse.y"
        { d_val_ = vs_(-1); std::dynamic_pointer_cast<StmtClass>(d_val_)->addMethod(std::dynamic_pointer_cast<StmtFunction>(vs_(0))); }
        break;

        case 13:
#line 49 "parse.y"
        { d_val_ = std::make_shared<StmtClass>(); std::dynamic_pointer_cast<StmtClass>(d_val_)->addMethod(std::dynamic_pointer_cast<StmtFunction>(vs_(0))); }
        break;

        case 14:
#line 52 "parse.y"
        { d_val_ = vs_(-3); std::dynamic_pointer_cast<StmtFunction>(d_val_)->setName(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-5))->get())); std::dynamic_pointer_cast<StmtFunction>(d_val_)->setBody(std::dynamic_pointer_cast<StmtBlock>(vs_(-1))); }
        break;

        case 15:
#line 53 "parse.y"
        { d_val_ = vs_(-3); std::dynamic_pointer_cast<StmtFunction>(d_val_)->setName(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-5))->get())); std::dynamic_pointer_cast<StmtFunction>(d_val_)->setBody(std::make_shared<StmtBlock>(std::vector<std::shared_ptr<Stmt>>{ std::make_shared<StmtReturn>(std::dynamic_pointer_cast<Expr>(vs_(0))) })); }
        break;

        case 16:
#line 56 "parse.y"
        { d_val_ = std::make_shared<StmtFunction>(); }
        break;

        case 17:
#line 58 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 18:
#line 60 "parse.y"
        { d_val_ = vs_(-2); std::dynamic_pointer_cast<StmtFunction>(d_val_)->addParam(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(0))->get())); }
        break;

        case 19:
#line 61 "parse.y"
        { d_val_ = std::make_shared<StmtFunction>(); std::dynamic_pointer_cast<StmtFunction>(d_val_)->addParam(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(0))->get())); }
        break;

        case 20:
#line 64 "parse.y"
        { d_val_ = std::make_shared<StmtVariable>(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 21:
#line 65 "parse.y"
        { d_val_ = std::make_shared<StmtVariable>(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), std::dynamic_pointer_cast<Expr>(vs_(0)), true); }
        break;

        case 22:
#line 69 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 23:
#line 70 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 24:
#line 71 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 25:
#line 72 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 26:
#line 73 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 27:
#line 74 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 28:
#line 76 "parse.y"
        { d_val_ = std::make_shared<StmtBlock>(); }
        break;

        case 29:
#line 78 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 30:
#line 80 "parse.y"
        { d_val_ = vs_(-1); std::dynamic_pointer_cast<StmtBlock>(d_val_)->append(std::dynamic_pointer_cast<Stmt>(vs_(0))); }
        break;

        case 31:
#line 81 "parse.y"
        { d_val_ = std::make_shared<StmtBlock>(); std::dynamic_pointer_cast<StmtBlock>(d_val_)->append(std::dynamic_pointer_cast<Stmt>(vs_(0))); }
        break;

        case 32:
#line 84 "parse.y"
        { d_val_ = std::make_shared<StmtExpression>(std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 33:
#line 87 "parse.y"
        { d_val_ = std::make_shared<StmtPrint>(std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 34:
#line 90 "parse.y"
        { d_val_ = std::make_shared<StmtReturn>(vs_(0) ? std::dynamic_pointer_cast<Expr>(vs_(0)) : std::make_shared<ExprLiteral>(std::monostate{})); }
        break;

        case 35:
#line 93 "parse.y"
        { d_val_ = std::make_shared<StmtIf>(std::dynamic_pointer_cast<Expr>(vs_(-3)), std::dynamic_pointer_cast<Stmt>(vs_(-1)), nullptr); }
        break;

        case 36:
#line 94 "parse.y"
        { d_val_ = std::make_shared<StmtIf>(std::dynamic_pointer_cast<Expr>(vs_(-5)), std::dynamic_pointer_cast<Stmt>(vs_(-3)), std::dynamic_pointer_cast<Stmt>(vs_(-1))); }
        break;

        case 37:
#line 97 "parse.y"
        { d_val_ = std::make_shared<StmtWhile>(std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Stmt>(vs_(-1))); }
        break;

        case 38:
#line 100 "parse.y"
        { 
         auto expr = std::dynamic_pointer_cast<ExprTernary>(vs_(-2));
         auto [ loIncl, hiIncl ] = expr->getIncl();
         auto outerBlock = std::make_shared<StmtBlock>();
         outerBlock->append(std::make_shared<StmtVariable>(expr->getName(), loIncl ? expr->getLo() : std::make_shared<ExprBinary>(PLUS, expr->getLo(), std::make_shared<ExprLiteral>(1.0))));
         auto innerBlock = std::make_shared<StmtBlock>(std::dynamic_pointer_cast<StmtBlock>(vs_(-1))->get());
         innerBlock->append(std::make_shared<StmtExpression>(std::make_shared<ExprAssign>(expr->getName(), std::make_shared<ExprBinary>(PLUS, std::make_shared<ExprVariable>(expr->getName()), std::make_shared<ExprLiteral>(1.0)))));
         outerBlock->append(std::make_shared<StmtWhile>(std::make_shared<ExprBinary>(hiIncl ? LESS_EQUAL : LESS, std::make_shared<ExprVariable>(expr->getName()), expr->getHi()), innerBlock));
         d_val_ = outerBlock;
         }
        break;

        case 39:
#line 113 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 40:
#line 114 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 41:
#line 115 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 42:
#line 116 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 43:
#line 117 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 44:
#line 118 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 45:
#line 119 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 46:
#line 121 "parse.y"
        { d_val_ = std::make_shared<ExprAssign>(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 47:
#line 122 "parse.y"
        { d_val_ = std::make_shared<ExprSet>(std::dynamic_pointer_cast<Expr>(vs_(-4)), get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 48:
#line 123 "parse.y"
        { d_val_ = std::make_shared<ExprSet>(std::dynamic_pointer_cast<Expr>(vs_(-4)), get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 49:
#line 126 "parse.y"
        { d_val_ = std::make_shared<ExprUnary>(NOT, std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 50:
#line 127 "parse.y"
        { d_val_ = std::make_shared<ExprUnary>(MINUS, std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 51:
#line 130 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(EQUAL_EQUAL, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 52:
#line 131 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(NOT_EQUAL, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 53:
#line 132 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(LESS, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 54:
#line 133 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(LESS_EQUAL, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 55:
#line 134 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(GREATER, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 56:
#line 135 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(GREATER_EQUAL, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 57:
#line 136 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(PLUS, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 58:
#line 137 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(MINUS, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 59:
#line 138 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(STAR, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 60:
#line 139 "parse.y"
        { d_val_ = std::make_shared<ExprBinary>(SLASH, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 61:
#line 142 "parse.y"
        { d_val_ = std::make_shared<ExprTernary>(std::dynamic_pointer_cast<Expr>(vs_(-4)), false, get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), false, std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 62:
#line 143 "parse.y"
        { d_val_ = std::make_shared<ExprTernary>(std::dynamic_pointer_cast<Expr>(vs_(-4)), false, get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), true, std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 63:
#line 144 "parse.y"
        { d_val_ = std::make_shared<ExprTernary>(std::dynamic_pointer_cast<Expr>(vs_(-4)), true, get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), false, std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 64:
#line 145 "parse.y"
        { d_val_ = std::make_shared<ExprTernary>(std::dynamic_pointer_cast<Expr>(vs_(-4)), true, get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(-2))->get()), true, std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 65:
#line 148 "parse.y"
        { d_val_ = std::make_shared<ExprLogical>(OR, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 66:
#line 149 "parse.y"
        { d_val_ = std::make_shared<ExprLogical>(AND, std::dynamic_pointer_cast<Expr>(vs_(-2)), std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 67:
#line 152 "parse.y"
        { d_val_ = std::make_shared<ExprVariable>(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(0))->get())); }
        break;

        case 68:
#line 153 "parse.y"
        { d_val_ = std::make_shared<ExprLiteral>(std::stod(scanner.matched())); }
        break;

        case 69:
#line 154 "parse.y"
        { d_val_ = std::make_shared<ExprLiteral>(scanner.matched().substr(1, scanner.matched().size() - 2)); }
        break;

        case 70:
#line 155 "parse.y"
        { d_val_ = std::make_shared<ExprLiteral>(true); }
        break;

        case 71:
#line 156 "parse.y"
        { d_val_ = std::make_shared<ExprLiteral>(false); }
        break;

        case 72:
#line 157 "parse.y"
        { d_val_ = std::make_shared<ExprLiteral>(std::monostate{}); }
        break;

        case 73:
#line 158 "parse.y"
        { d_val_ = std::make_shared<ExprGrouping>(std::dynamic_pointer_cast<Expr>(vs_(-1))); }
        break;

        case 74:
#line 159 "parse.y"
        { d_val_ = std::make_shared<ExprThis>(); }
        break;

        case 75:
#line 160 "parse.y"
        { d_val_ = std::make_shared<ExprSuper>(get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(0))->get())); }
        break;

        case 76:
#line 163 "parse.y"
        { d_val_ = std::make_shared<ExprLiteral>(scanner.matched()); }
        break;

        case 77:
#line 166 "parse.y"
        { d_val_ = vs_(0); }
        break;

        case 78:
#line 169 "parse.y"
        { d_val_ = std::make_shared<ExprCall>(); }
        break;

        case 79:
#line 171 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 80:
#line 173 "parse.y"
        { d_val_ = vs_(-2); std::dynamic_pointer_cast<ExprCall>(d_val_)->appendArg(std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 81:
#line 174 "parse.y"
        { d_val_ = std::make_shared<ExprCall>(); std::dynamic_pointer_cast<ExprCall>(d_val_)->appendArg(std::dynamic_pointer_cast<Expr>(vs_(0))); }
        break;

        case 82:
#line 177 "parse.y"
        { d_val_ = std::make_shared<ExprGet>(std::dynamic_pointer_cast<Expr>(vs_(-2)), get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(0))->get())); }
        break;

        case 83:
#line 178 "parse.y"
        { d_val_ = std::dynamic_pointer_cast<ExprCall>(vs_(-1)); std::dynamic_pointer_cast<ExprCall>(d_val_)->setCallee(std::dynamic_pointer_cast<Expr>(vs_(-3))); }
        break;

        case 84:
#line 179 "parse.y"
        { d_val_ = std::make_shared<ExprGet>(std::dynamic_pointer_cast<Expr>(vs_(-2)), get<std::string>(std::dynamic_pointer_cast<ExprLiteral>(vs_(0))->get())); }
        break;

        case 85:
#line 180 "parse.y"
        { d_val_ = std::dynamic_pointer_cast<ExprCall>(vs_(-1)); std::dynamic_pointer_cast<ExprCall>(d_val_)->setCallee(std::dynamic_pointer_cast<Expr>(vs_(-3))); }
        break;

        case 86:
#line 183 "parse.y"
        { d_val_ = nullptr; }
        break;

        case 87:
#line 185 "parse.y"
        {
            d_val_ = vs_(0);
        }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parse::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parse::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parse::print_()
{
// $insert print
}

// derived/parse
int Parse::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


