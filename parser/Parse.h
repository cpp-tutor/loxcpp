// Generated by Bisonc++ V6.05.00 on Sun, 28 Jan 2024 14:16:57 +0000

#ifndef Parse_h_included
#define Parse_h_included

// $insert baseclass
#include "Parsebase.h"

#include "../lexer/Lex.h"
#include <functional>


class Parse: public ParseBase
{
        
    Lex& scanner;
    std::function<void(std::shared_ptr<Stmt>)> *action_stmt;
    public:
        Parse() = delete;
        Parse(Lex& scanner, decltype(action_stmt) action_stmt = nullptr)
            : scanner{ scanner }, action_stmt{ action_stmt } {}
        int parse();

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction_(int ruleNr);
        void errorRecovery_();
        void nextCycle_();
        void nextToken_();
        void print_();
};


#endif
