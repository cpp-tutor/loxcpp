## Language spec for Abaci


Constant assignment

let a = 3.3

Variable assignment

let b <- 1

Variable reassginment

b <- 2

Tuple assignment

let c <- { 1, 2.2, 'hi' }

Array assignment

let d = [ 2, 3, 5, 7, 11 ]

Math operators

+, -, *, / (creates floating point when % non-zero), % (integer only), // (floor division), %% (create rational)

Comparison operators

=, /=, <, <=, >=, >, begin </<= v </<= end

Decisions

if cond
  stmts...
endif

if cond
  stmts...
elif cond
  stmts...
else
  stmts...
endif

case var of
  when match1 stmts...
  when match2... stmts...
  else
  stmts...
endcase

Loops

while cond
  stmts...
endwhile

repeat
  stmts...
until cond

for cond step n
  stmts...
next

for elem in container
  stmts...
next

Function definition

let f(x) -> x + 1

let g() -> 
  for 0 <= x < 10
    print x, ' ',
  next

Function call

b <- f(b)
g()

Class definition

class c
  fn init(x, y) ->
    this.my_x <- x
    this.my_y <- y
    this.immutable = 42
  endfn

  let h() -> [ my_x, my_y ]

  fn i(d) ->
    print my_x * d
    print my_y * d
  endfn
endclass

Function reassingment

let k <- g
k <- f
k(42)

Comments

# This is a comment
/* And so is this */
